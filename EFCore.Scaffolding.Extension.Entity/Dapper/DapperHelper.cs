namespace EFCore.Scaffolding.Extension.Entity.Dapper
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Reflection;
    using System.Threading.Tasks;
    using Entities;
    using global::Dapper;

    public static class DapperHelper
    {
        public const string connLocal = @"Data Source=HCHENG\SQLEXPRESS;Initial Catalog=Scaffolding;Integrated Security=True";

        static DapperHelper()
        {
            DefaultTypeMap.MatchNamesWithUnderscores = true;
            SqlMapper.AddTypeHandler(new DateTimeToTicksHandler());
        }

        private static List<PropertyInfo> GetPropertyInfos<T>() => typeof(T).GetProperties().ToList();

        public static IDbConnection Connection => new SqlConnection(connLocal);

        public static T Find<T>(params object[] keyValues)
        {
            using (Connection)
            {
                var keys = PK<T>().Split(',');
                string sql = $"SELECT * FROM {Table<T>()} WHERE " + string.Join(" AND ", keys.Select(o => $"{o}=@{o}"));
                var parameters = new DynamicParameters();
                for (int i = 0; i < keyValues.Length; i++)
                {
                    parameters.Add(keys[i], keyValues[i]);
                }

                return Connection.QueryFirstOrDefault<T>(sql, parameters);
            }
        }

        // TODO: not support multiple key.
        public static int Delete<T>(int id)
        {
            using (Connection)
            {
                PrepareDelete<T>(id, out string sql, out DynamicParameters parameters);
                return Connection.Execute(sql, parameters);
            }
        }

        public static int Insert<T>(T entity)
        {
            using (Connection)
            {
                PrepareInsert(entity, out string sql, out DynamicParameters parameters);
                return Connection.Execute(sql, parameters);
            }
        }

        public static int Update<T>(T entity)
        {
            using (Connection)
            {
                PrepareUpdate(entity, out string sql, out DynamicParameters parameters);
                return Connection.Execute(sql, parameters);
            }
        }

        public static async Task<int> DeleteAsync<T>(int id)
        {
            using (Connection)
            {
                PrepareDelete<T>(id, out string sql, out DynamicParameters parameters);
                return await Connection.ExecuteAsync(sql, parameters).ConfigureAwait(false);
            }
        }

        public static IEnumerable<T> FindAll<T>()
        {
            using (Connection)
            {
                string sql = $"SELECT * FROM {Table<T>()}";
                return Connection.Query<T>(sql);
            }
        }

        public static IEnumerable<T> Page<T>(int size)
        {
            using (Connection)
            {
                string sql = $"SELECT TOP {size} * FROM {Table<T>()}";
                return Connection.Query<T>(sql);
            }
        }

        internal static T Query<T>(string sql, object param = null)
        {
            sql = $"SELECT * FROM {Table<T>()} WHERE " + sql;
            return Connection.QueryFirst<T>(sql, param);
        }

        private static void PrepareDelete<T>(int id, out string sql, out DynamicParameters parameters)
        {
            var pk = PK<T>();
            sql = $"DELETE FROM {Table<T>()} WHERE {pk}=@{pk}";
            parameters = new DynamicParameters();
            parameters.Add(pk, id);
        }

        private static void PrepareInsert<T>(T entity, out string sql, out DynamicParameters parameters)
        {
            sql = $"INSERT INTO {Table<T>()}({string.Join(",", GetColumnList(entity))}) VALUES ({string.Join(",", GetColumnList(entity).Select(column => "@" + column))})";
            parameters = new DynamicParameters();

            // Some parameters may not be needed (automatically generated by the database).
            foreach (var item in GetPropertyInfos<T>())
            {
                var key = $"{typeof(T).Name}.{item.Name}";
                if (DatabaseModel.Mapping.ContainsKey(key))
                {
                    parameters.Add(DatabaseModel.Mapping[key], ValueConverter.GetConvertedValue(entity, item));
                }
            }
        }

        private static void PrepareUpdate<T>(T entity, out string sql, out DynamicParameters parameters)
        {
            sql = $"UPDATE {Table<T>()} SET {GetUpdateSetClause(entity)} WHERE {PK<T>()}=@{PK<T>()}";
            parameters = new DynamicParameters();

            // Some parameters may not be needed (automatically generated by the database).
            foreach (var item in GetPropertyInfos<T>())
            {
                var key = $"{typeof(T).Name}.{item.Name}";
                if (DatabaseModel.Mapping.ContainsKey(key))
                {
                    parameters.Add(DatabaseModel.Mapping[key], ValueConverter.GetConvertedValue(entity, item));
                }
            }
        }

        private static string GetUpdateSetClause<T>(T entity)
        {
            return string.Join(",", GetColumnList(entity).Select(o => $"{o}=@{o}"));
        }

        private static IList<string> GetColumnList<T>(T entity)
        {
            List<string> values = new List<string>();
            foreach (var item in GetColumMappings<T>())
            {
                string key = $"{Table<T>()}.{item.Value}";
                bool isIncrease = IncreaseModel.Mapping.ContainsKey(key);
                bool isDefaultValueSql = DefaultValueSqlModel.Mapping.ContainsKey(key);

                // Not self-incrementing, no default value (usually a non-primary key field)
                if (!isIncrease && !isDefaultValueSql)
                {
                    values.Add(item.Value);
                    continue;
                }

                // When the space is empty, the database automatically takes the default value field and the value of the property is not the default value.
                if (isDefaultValueSql)
                {
                    var propertyInfo = typeof(T).GetProperties().FirstOrDefault(o => DatabaseModel.Mapping[$"{typeof(T).Name}.{o.Name}"] == item.Value);
                    var value = propertyInfo.GetValue(entity);
                    switch (propertyInfo.PropertyType.Name)
                    {
                        case nameof(Guid):
                            if ((Guid)value != default)
                            {
                                values.Add(item.Value);
                            }

                            continue;
                        case nameof(Int32):
                            if ((int)value != default)
                            {
                                values.Add(item.Value);
                            }

                            continue;
                        default:
                            throw new Exception("Exceptions");
                    }
                }
            }

            return values;
        }

        private static string PK<T>() => DatabaseModel.Mapping[$"{typeof(T).Name}.PrimaryKey"];

        private static string Table<T>() => DatabaseModel.Mapping[typeof(T).Name];

        private static IEnumerable<KeyValuePair<string, string>> GetColumMappings<T>()
        {
            return DatabaseModel.Mapping.Where(o => o.Key.StartsWith($"{typeof(T).Name}.") && !o.Key.Contains("PrimaryKey"));
        }
    }
}